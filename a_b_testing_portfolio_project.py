# -*- coding: utf-8 -*-
"""A/B Testing Portfolio Project.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/12eTa3N4aMUJ9vtpTIgTYHWiwZjhnI6ri
"""

import plotly.express as px
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import numpy as np
import scipy.stats as stats
import statsmodels.stats.api as sms
import matplotlib as mpl
from math import ceil
from scipy.stats import ttest_1samp, shapiro, levene, ttest_ind, mannwhitneyu, pearsonr, spearmanr, \
    kendalltau, f_oneway, kruskal
import warnings
warnings.filterwarnings('ignore')

df = pd.read_csv('/content/drive/MyDrive/Colab Notebooks/portfolio ecommerce data/ab_data.csv')

"""### EDA: Exploratory Data Analysis"""

# Let's take a first look at how this dataset looks like. 
# Here we have all the columns and now we know that we have 5 columns and 294480 rows to work with.
display(df)

# Printing information about the dataset, including column labels, column data types, and the number of cells in each column (non-null values).

df.info()

# Checking the number of unique values for each column. The 'lambda x' function is used to apply the .nunique() method to each column individually.

df.apply(lambda x: x.nunique())

# Checking for missing values.

df.isnull().sum()

# Removing duplicates with the user_id column as parameter.

print(df.shape)
df = df.drop_duplicates(subset= 'user_id', keep= False)
print(df.shape)

# Checking if there is mismatch between group and landing_page.

df_mismatch = df[(df["group"]=="treatment")&(df["landing_page"]=="old_page")
                |(df["group"]=="control")&(df["landing_page"]=="new_page")]
n_mismatch = df_mismatch.shape[0]
print(f"The number of mismatched rows:{n_mismatch} rows" )
print("Percent of mismatched rows:%.2f%%" % (n_mismatch/df.shape[0]*100))

# Displaying the control and treatment group numbers.

df.groupby(['group','landing_page']).agg({'landing_page': lambda x: x.value_counts()})

# Calculating the mean conversion for each group.

df.groupby(['group','landing_page']).agg({'converted': 'mean'})

# Normalizing and getting the conversion rate.

pd.DataFrame(df.loc[:,'landing_page'].value_counts(normalize = True) * 100)

# Control group = new page. Treatment group = old page.

df[((df['group'] == 'control') & (df['landing_page'] == 'new_page')) |((df['group'] == 'treatment') & (df['landing_page'] == 'old_page')) ]

"""# A/B Testing

Normality Test

Shapiro-Wilk Test: Tests whether a dataframe has a Gaussian distribution.



>H0: the sample has a Gaussian distribution.

>H1: the sample does not have a Gaussian distribution.

If the data is Gaussian: "Use Parametric Statistical Methods".
If the data is not Gaussian: "Use Nonparametric Statistical Methods".
"""

stat, p = shapiro(df.loc[df["landing_page"] == "old_page", "converted"])
print('stat={0:.3f}, p={0:.3f}' .format(stat, p))
if p > 0.05:
    print('Probably Gaussian')
else:
    print('Probably not Gaussian')

stat, p = shapiro(df.loc[df["landing_page"] == "new_page", "converted"])
print('stat={0:.3f}, p={0:.3f}' .format(stat, p))
if p > 0.05:
    print('Probably Gaussian')
else:
    print('Probably not Gaussian')

"""As p-value < 0.05, then the dataframe is probably not Gaussian. In this case, we should use a nonparametric statistical method.

Variance Homogeneity

Levene's Test for Equal Variances: used to determine whether two or more groups have equal variances.

> H0: Variances are homogeneous.

> H1: Variances are not homogeneous.
"""

if levene((df.loc[df["landing_page"] == "old_page", "converted"]), (df.loc[df["landing_page"] == "new_page", "converted"]))[1] < 0.05:
    print('Reject the null hypothesis of equal variance between groups.')
    print(f'P-value is {levene((df.loc[df["landing_page"] == "old_page", "converted"]), (df.loc[df["landing_page"] == "new_page", "converted"]))[1]}.')
else:
    print('Fail to reject the null hypothesis of equal variance between groups.')
    print(f'P-value is {levene((df.loc[df["landing_page"] == "old_page", "converted"]), (df.loc[df["landing_page"] == "new_page", "converted"]))[1]}.')

"""Hypothesis Testing

Mann-Whitney U Test: used to compare the differences between two samples when the sample distributions are not normally distributed.


>H0: There is not statistically significant difference between the old page and new page

>H1: There is statistically significant difference between the old page and new page
"""

test_stat, pvalue = mannwhitneyu(df.loc[df["landing_page"] == "new_page", "converted"],
                                 df.loc[df["landing_page"] == "old_page", "converted"])

print('Test Stat = %.4f, p-value = %.4f' % (test_stat, pvalue))

"""Conclusion: as the p-value < 0.05, we fail to reject the null hypothesis, there is no statistical difference between the old and the new pages. That means that the new page does not generate more profit. """